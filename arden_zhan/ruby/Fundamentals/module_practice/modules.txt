# Modules

Enumerable is most important module to master in Ruby.
Module is similar to Classes, is actually a superclass of Class

Class.superclass #> Module

Provides collection classes the ability to sort, search, and traverse

Module is used to group together collection of variables and methods (similar to class). Use modules if it's meant to be included within a class. Use class if we are instantiating something. 

What does including a module mean?


Enumerable is just a module that is included in Arrays and Hashes
- can verify by looking at ancestors
- ancestors contain list of Classes and Modules that a class inherits / includes

Array.ancestors  # => [Array, Enumerable, Object, Kernel, BasicObject]
Hash.ancestors   # => [Hash, Enumerable, Object, Kernel, BasicObject]

Enumerable module is equivalent to the underscore library for JavaScript except that it comes with Ruby


Method Lookup
When sending message to object, first checks within own class if method exists. If not, moves up ancestor chain to see if method exists. Go up until found or doesn't exist. 

Most methods from Iterators section is from Enumerable module